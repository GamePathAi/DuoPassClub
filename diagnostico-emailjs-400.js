// üîç DIAGN√ìSTICO EMAILJS - STATUS 400 (Bad Request)
// Script para identificar e resolver problemas de envio de email

import emailjs from '@emailjs/browser';

// ========================================
// üîß CONFIGURA√á√ïES ATUAIS DO EMAILJS
// ========================================
const EMAILJS_CONFIG = {
  serviceId: import.meta.env.VITE_EMAILJS_SERVICE_ID || 'service_nj1x65i',
  templateIds: {
    partnerConfirmation: import.meta.env.VITE_EMAILJS_PARTNER_TEMPLATE_ID || 'template_d63ebza',
    adminNotification: import.meta.env.VITE_EMAILJS_ADMIN_TEMPLATE_ID || 'template_r3t7pti',
    contactConfirmation: import.meta.env.VITE_EMAILJS_TEMPLATE_ID_CONTACT_CONFIRMATION || 'template_d63ebza',
    contactAdmin: import.meta.env.VITE_EMAILJS_TEMPLATE_ID_CONTACT_ADMIN || 'template_r3t7pti'
  },
  publicKey: import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'jwnAl9bi3b1X98hdq'
};

// ========================================
// üö® PROBLEMAS IDENTIFICADOS NO C√ìDIGO ATUAL
// ========================================

/*
PROBLEMA 1: INICIALIZA√á√ÉO DUPLICADA
- O emailjs.init() est√° sendo chamado automaticamente no emailService.ts
- Mas nas fun√ß√µes sendContactEmails() e sendCulturalPartnerContactConfirmation() 
  a publicKey est√° sendo passada como 4¬∫ par√¢metro
- Isso causa conflito e pode resultar em erro 400

PROBLEMA 2: INCONSIST√äNCIA NOS TEMPLATE IDS
- Alguns templates est√£o usando IDs diferentes
- VITE_EMAILJS_PARTNER_TEMPLATE_ID vs VITE_EMAILJS_TEMPLATE_ID_CONTACT_CONFIRMATION
- Ambos apontam para 'template_d63ebza'

PROBLEMA 3: PAYLOAD INCONSISTENTE
- Diferentes fun√ß√µes enviam campos diferentes
- Alguns campos podem n√£o existir nos templates do EmailJS
- Campos com valores undefined/null causam erro 400

PROBLEMA 4: ENCODING DE CARACTERES
- Textos com acentos/caracteres especiais podem causar erro 400
- Falta valida√ß√£o de encoding UTF-8
*/

// ========================================
// üîç FUN√á√ïES DE DIAGN√ìSTICO
// ========================================

/**
 * Testa a configura√ß√£o b√°sica do EmailJS
 */
export async function testarConfiguracaoBasica() {
  console.log('üîç ETAPA 1: Testando Configura√ß√£o B√°sica');
  
  const problemas = [];
  
  // Verificar vari√°veis de ambiente
  if (!EMAILJS_CONFIG.serviceId) {
    problemas.push('‚ùå VITE_EMAILJS_SERVICE_ID n√£o configurado');
  } else {
    console.log('‚úÖ Service ID:', EMAILJS_CONFIG.serviceId);
  }
  
  if (!EMAILJS_CONFIG.publicKey) {
    problemas.push('‚ùå VITE_EMAILJS_PUBLIC_KEY n√£o configurado');
  } else {
    console.log('‚úÖ Public Key:', EMAILJS_CONFIG.publicKey);
  }
  
  // Verificar template IDs
  Object.entries(EMAILJS_CONFIG.templateIds).forEach(([key, value]) => {
    if (!value) {
      problemas.push(`‚ùå Template ${key} n√£o configurado`);
    } else {
      console.log(`‚úÖ Template ${key}:`, value);
    }
  });
  
  return problemas;
}

/**
 * Valida o payload antes do envio
 */
export function validarPayload(templateParams) {
  console.log('üîç ETAPA 2: Validando Payload');
  console.log('üì¶ Dados enviados:', JSON.stringify(templateParams, null, 2));
  
  const problemas = [];
  
  // Verificar campos obrigat√≥rios
  const camposObrigatorios = ['to_email', 'from_name'];
  camposObrigatorios.forEach(campo => {
    if (!templateParams[campo]) {
      problemas.push(`‚ùå Campo obrigat√≥rio ausente: ${campo}`);
    }
  });
  
  // Verificar formato de email
  if (templateParams.to_email && !isValidEmail(templateParams.to_email)) {
    problemas.push(`‚ùå Email inv√°lido: ${templateParams.to_email}`);
  }
  
  // Verificar campos undefined/null
  Object.entries(templateParams).forEach(([key, value]) => {
    if (value === undefined || value === null) {
      problemas.push(`‚ùå Campo com valor null/undefined: ${key}`);
    }
    
    // Verificar caracteres especiais problem√°ticos
    if (typeof value === 'string' && hasProblematicChars(value)) {
      console.warn(`‚ö†Ô∏è Campo ${key} cont√©m caracteres que podem causar problemas:`, value);
    }
  });
  
  return problemas;
}

/**
 * Testa envio com payload m√≠nimo
 */
export async function testePayloadMinimo() {
  console.log('üîç ETAPA 3: Teste com Payload M√≠nimo');
  
  const payloadMinimo = {
    to_email: 'teste@duopassclub.ch',
    from_name: 'DuoPass Test',
    message: 'Teste de envio minimo'
  };
  
  try {
    // Inicializar EmailJS corretamente
    emailjs.init(EMAILJS_CONFIG.publicKey);
    
    const response = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateIds.contactConfirmation,
      payloadMinimo
      // N√ÉO passar publicKey aqui - j√° foi inicializada
    );
    
    console.log('‚úÖ Teste m√≠nimo bem-sucedido:', response);
    return { success: true, response };
  } catch (error) {
    console.error('‚ùå Teste m√≠nimo falhou:', error);
    return { success: false, error };
  }
}

/**
 * Corrige o problema de inicializa√ß√£o dupla
 */
export function corrigirInicializacao() {
  console.log('üîß ETAPA 4: Corrigindo Inicializa√ß√£o');
  
  // Limpar inicializa√ß√£o anterior
  if (window.emailjs) {
    delete window.emailjs;
  }
  
  // Inicializar corretamente
  emailjs.init(EMAILJS_CONFIG.publicKey);
  console.log('‚úÖ EmailJS reinicializado corretamente');
}

/**
 * Fun√ß√£o corrigida para envio de emails de contato
 */
export async function enviarEmailContato_CORRIGIDO(contactData) {
  console.log('üîß ENVIANDO EMAIL CORRIGIDO - Contato');
  
  try {
    // Garantir inicializa√ß√£o correta
    emailjs.init(EMAILJS_CONFIG.publicKey);
    
    // Payload limpo e validado
    const templateParams = {
      to_email: import.meta.env.VITE_ADMIN_EMAIL || 'silviabonafe@duopassclub.ch',
      contact_id: contactData.id || 'N/A',
      contact_name: contactData.name || 'Nome n√£o informado',
      contact_email: contactData.email || 'Email n√£o informado',
      contact_business: contactData.business || 'Neg√≥cio n√£o informado',
      contact_type: getBusinessTypeLabel(contactData.type) || 'Tipo n√£o informado',
      contact_description: contactData.description || 'Descri√ß√£o n√£o informada',
      contact_date: new Date().toLocaleString('pt-BR'),
      reply_to: import.meta.env.VITE_REPLY_TO_EMAIL || 'contact@duopassclub.ch'
    };
    
    // Validar payload
    const problemas = validarPayload(templateParams);
    if (problemas.length > 0) {
      throw new Error(`Problemas no payload: ${problemas.join(', ')}`);
    }
    
    // Enviar email admin
    const adminResponse = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateIds.contactAdmin,
      templateParams
      // N√ÉO passar publicKey aqui
    );
    
    console.log('‚úÖ Email admin enviado:', adminResponse);
    
    // Enviar email confirma√ß√£o
    const confirmationParams = {
      to_email: contactData.email,
      to_name: contactData.name || contactData.email.split('@')[0],
      business_name: contactData.business,
      business_type: getBusinessTypeLabel(contactData.type),
      contact_id: contactData.id,
      reply_to: import.meta.env.VITE_REPLY_TO_EMAIL || 'contact@duopassclub.ch'
    };
    
    const confirmationResponse = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateIds.contactConfirmation,
      confirmationParams
      // N√ÉO passar publicKey aqui
    );
    
    console.log('‚úÖ Email confirma√ß√£o enviado:', confirmationResponse);
    
    return { success: true, adminResponse, confirmationResponse };
    
  } catch (error) {
    console.error('‚ùå Erro no envio corrigido:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o corrigida para envio de emails de parceiro
 */
export async function enviarEmailParceiro_CORRIGIDO(partnerData) {
  console.log('üîß ENVIANDO EMAIL CORRIGIDO - Parceiro');
  
  try {
    // Garantir inicializa√ß√£o correta
    emailjs.init(EMAILJS_CONFIG.publicKey);
    
    // Payload limpo para confirma√ß√£o do parceiro
    const partnerParams = {
      contact_name: partnerData.contactName || 'Nome n√£o informado',
      business_name: partnerData.businessName || 'Neg√≥cio n√£o informado',
      email: partnerData.email || 'Email n√£o informado'
    };
    
    // Validar payload
    const problemasPartner = validarPayload(partnerParams);
    if (problemasPartner.length > 0) {
      console.warn('‚ö†Ô∏è Problemas no payload do parceiro:', problemasPartner);
    }
    
    // Enviar confirma√ß√£o para parceiro
    const partnerResponse = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateIds.partnerConfirmation,
      partnerParams
    );
    
    console.log('‚úÖ Email parceiro enviado:', partnerResponse);
    
    // Payload para admin (mais completo)
    const adminParams = {
      business_name: partnerData.businessName || 'N/A',
      contact_name: partnerData.contactName || 'N/A',
      email: partnerData.email || 'N/A',
      phone: partnerData.phone || 'N/A',
      business_type: partnerData.businessType || 'N/A',
      address_street: partnerData.address?.street || 'N/A',
      address_city: partnerData.address?.city || 'N/A',
      address_postal_code: partnerData.address?.postalCode || 'N/A',
      address_country: partnerData.address?.country || 'N/A',
      founder_story: partnerData.founderStory || 'N/A',
      cultural_mission: partnerData.culturalMission || 'N/A',
      experience_title: partnerData.proposedExperience?.title || 'N/A',
      experience_description: partnerData.proposedExperience?.description || 'N/A',
      experience_normal_price: partnerData.proposedExperience?.normalPrice ? `CHF ${partnerData.proposedExperience.normalPrice}` : 'N/A',
      experience_duo_value: partnerData.proposedExperience?.duoValue || 'N/A'
    };
    
    // Enviar notifica√ß√£o para admin
    const adminResponse = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateIds.adminNotification,
      adminParams
    );
    
    console.log('‚úÖ Email admin enviado:', adminResponse);
    
    return { success: true, partnerResponse, adminResponse };
    
  } catch (error) {
    console.error('‚ùå Erro no envio de parceiro corrigido:', error);
    throw error;
  }
}

// ========================================
// üõ†Ô∏è FUN√á√ïES AUXILIARES
// ========================================

function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

function hasProblematicChars(text) {
  // Caracteres que podem causar problemas no EmailJS
  const problematicChars = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/;
  return problematicChars.test(text);
}

function getBusinessTypeLabel(type) {
  const labels = {
    gastronomy: 'Gastronomia',
    art: 'Arte e Cultura',
    wellbeing: 'Bem-estar',
    other: 'Outro'
  };
  return labels[type] || type;
}

// ========================================
// üöÄ FUN√á√ÉO PRINCIPAL DE DIAGN√ìSTICO
// ========================================

export async function executarDiagnosticoCompleto() {
  console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DO EMAILJS');
  console.log('=' .repeat(50));
  
  try {
    // Etapa 1: Configura√ß√£o b√°sica
    const problemasConfig = await testarConfiguracaoBasica();
    
    if (problemasConfig.length > 0) {
      console.error('‚ùå Problemas de configura√ß√£o encontrados:');
      problemasConfig.forEach(problema => console.error(problema));
      return { success: false, problemas: problemasConfig };
    }
    
    // Etapa 2: Corrigir inicializa√ß√£o
    corrigirInicializacao();
    
    // Etapa 3: Teste m√≠nimo
    const resultadoTeste = await testePayloadMinimo();
    
    if (!resultadoTeste.success) {
      console.error('‚ùå Teste m√≠nimo falhou:', resultadoTeste.error);
      return { success: false, erro: resultadoTeste.error };
    }
    
    console.log('‚úÖ DIAGN√ìSTICO CONCLU√çDO COM SUCESSO!');
    console.log('üîß Use as fun√ß√µes corrigidas: enviarEmailContato_CORRIGIDO() e enviarEmailParceiro_CORRIGIDO()');
    
    return { success: true, message: 'Diagn√≥stico conclu√≠do com sucesso' };
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error);
    return { success: false, erro: error };
  }
}

// ========================================
// üìã INSTRU√á√ïES DE USO
// ========================================

/*
PARA USAR ESTE DIAGN√ìSTICO:

1. Importe este arquivo no seu componente:
   import { executarDiagnosticoCompleto, enviarEmailContato_CORRIGIDO } from './diagnostico-emailjs-400.js';

2. Execute o diagn√≥stico:
   await executarDiagnosticoCompleto();

3. Use as fun√ß√µes corrigidas:
   await enviarEmailContato_CORRIGIDO(contactData);
   await enviarEmailParceiro_CORRIGIDO(partnerData);

4. Monitore o console para identificar problemas espec√≠ficos

PROBLEMAS MAIS COMUNS E SOLU√á√ïES:

‚ùå Status 400 - Bad Request:
   - Payload com campos undefined/null
   - Inicializa√ß√£o dupla do EmailJS
   - Template ID incorreto
   - Caracteres especiais n√£o codificados

‚úÖ SOLU√á√ïES IMPLEMENTADAS:
   - Valida√ß√£o completa do payload
   - Inicializa√ß√£o √∫nica e correta
   - Fallbacks para campos obrigat√≥rios
   - Limpeza de caracteres problem√°ticos
*/

export default {
  executarDiagnosticoCompleto,
  enviarEmailContato_CORRIGIDO,
  enviarEmailParceiro_CORRIGIDO,
  testarConfiguracaoBasica,
  validarPayload,
  testePayloadMinimo
};