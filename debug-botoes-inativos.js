// üîç DEBUG ESPEC√çFICO: Bot√µes Inativos P√≥s-Login
// Cole este script no console do navegador (F12) ap√≥s fazer login

console.log('üöÄ INICIANDO DEBUG DOS BOT√ïES INATIVOS');

// 1. VERIFICAR ESTADO COMPLETO DO AUTHCONTEXT
console.log('\n=== 1. ESTADO DO AUTHCONTEXT ===');
try {
  // Tentar acessar o contexto atrav√©s do React DevTools ou window
  const authState = {
    user: window.authContext?.user || 'N√£o encontrado',
    profile: window.authContext?.profile || 'N√£o encontrado',
    loading: window.authContext?.loading || 'N√£o encontrado',
    isAuthenticated: window.authContext?.isAuthenticated || 'N√£o encontrado'
  };
  console.log('üìä Estado AuthContext:', authState);
} catch (error) {
  console.log('‚ùå Erro ao acessar AuthContext:', error);
}

// 2. VERIFICAR USU√ÅRIO NO SUPABASE
console.log('\n=== 2. VERIFICANDO USU√ÅRIO NO SUPABASE ===');
try {
  const { data: { user }, error } = await supabase.auth.getUser();
  console.log('üë§ Usu√°rio Supabase:', { user, error });
  
  if (user) {
    // Verificar dados do usu√°rio na tabela users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();
    
    console.log('üìã Dados do usu√°rio na tabela:', { userData, userError });
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar usu√°rio:', error);
}

// 3. VERIFICAR VOUCHERS DO USU√ÅRIO
console.log('\n=== 3. VERIFICANDO VOUCHERS ===');
try {
  const { data: { user } } = await supabase.auth.getUser();
  
  if (user) {
    const { data: vouchers, error } = await supabase
      .from('vouchers')
      .select('*')
      .eq('user_id', user.id);
    
    console.log('üé´ Vouchers do usu√°rio:', { vouchers, error, count: vouchers?.length });
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar vouchers:', error);
}

// 4. VERIFICAR OFERTAS DISPON√çVEIS
console.log('\n=== 4. VERIFICANDO OFERTAS ===');
try {
  const { data: offers, error } = await supabase
    .from('offers')
    .select('*')
    .eq('is_active', true)
    .gte('expires_at', new Date().toISOString());
  
  console.log('üõçÔ∏è Ofertas dispon√≠veis:', { offers, error, count: offers?.length });
} catch (error) {
  console.log('‚ùå Erro ao verificar ofertas:', error);
}

// 5. VERIFICAR ESTADO DOS BOT√ïES
console.log('\n=== 5. VERIFICANDO BOT√ïES ===');
try {
  const buttons = document.querySelectorAll('button');
  console.log('üîò Total de bot√µes encontrados:', buttons.length);
  
  buttons.forEach((btn, index) => {
    const buttonInfo = {
      index,
      text: btn.textContent?.trim().substring(0, 30) + '...',
      disabled: btn.disabled,
      className: btn.className,
      hasOnClick: !!btn.onclick,
      hasEventListeners: btn.getEventListeners ? Object.keys(btn.getEventListeners()).length : 'N/A'
    };
    console.log(`Bot√£o ${index}:`, buttonInfo);
  });
} catch (error) {
  console.log('‚ùå Erro ao verificar bot√µes:', error);
}

// 6. VERIFICAR LOADING STATES
console.log('\n=== 6. VERIFICANDO LOADING STATES ===');
try {
  // Procurar por elementos de loading
  const loadingElements = document.querySelectorAll('[class*="loading"], [class*="spinner"]');
  console.log('‚è≥ Elementos de loading encontrados:', loadingElements.length);
  
  // Verificar se h√° texto "Carregando"
  const loadingTexts = Array.from(document.querySelectorAll('*')).filter(el => 
    el.textContent?.includes('Carregando') || el.textContent?.includes('Loading')
  );
  console.log('üìù Textos de loading:', loadingTexts.map(el => el.textContent));
} catch (error) {
  console.log('‚ùå Erro ao verificar loading states:', error);
}

// 7. VERIFICAR CONSOLE LOGS ANTERIORES
console.log('\n=== 7. PROCURAR LOGS DO CUSTOMERDASHBOARD ===');
console.log('üîç Procure nos logs acima por:');
console.log('- "üè† CustomerDashboard: Componente renderizado"');
console.log('- "üìä CustomerDashboard: Resultado da busca"');
console.log('- "‚úÖ CustomerDashboard: Ofertas carregadas"');
console.log('- "‚úÖ CustomerDashboard: Vouchers carregados"');

// 8. TESTE DE CLIQUE EM BOT√ÉO
console.log('\n=== 8. TESTE DE CLIQUE ===');
try {
  const offerButtons = Array.from(document.querySelectorAll('button')).filter(btn => 
    btn.textContent?.includes('Ver Detalhes') || btn.textContent?.includes('Ver E-Ticket')
  );
  
  console.log('üéØ Bot√µes de a√ß√£o encontrados:', offerButtons.length);
  
  if (offerButtons.length > 0) {
    console.log('üß™ Testando clique no primeiro bot√£o...');
    const firstButton = offerButtons[0];
    console.log('Bot√£o selecionado:', {
      text: firstButton.textContent,
      disabled: firstButton.disabled,
      className: firstButton.className
    });
    
    // Simular clique
    firstButton.click();
    console.log('‚úÖ Clique simulado executado');
  } else {
    console.log('‚ùå Nenhum bot√£o de a√ß√£o encontrado');
  }
} catch (error) {
  console.log('‚ùå Erro no teste de clique:', error);
}

// 9. VERIFICAR ESTRUTURA DO DASHBOARD
console.log('\n=== 9. ESTRUTURA DO DASHBOARD ===');
try {
  const tabs = document.querySelectorAll('[role="tab"], button[class*="tab"]');
  console.log('üìë Tabs encontradas:', tabs.length);
  
  const activeTab = document.querySelector('[class*="border-[#FF6B35]"]');
  console.log('üéØ Tab ativa:', activeTab?.textContent?.trim());
  
  const voucherCards = document.querySelectorAll('[class*="voucher"], [class*="card"]');
  console.log('üé´ Cards de voucher/oferta:', voucherCards.length);
} catch (error) {
  console.log('‚ùå Erro ao verificar estrutura:', error);
}

// 10. RESUMO E DIAGN√ìSTICO
console.log('\n=== üéØ RESUMO DO DIAGN√ìSTICO ===');
console.log('1. Verifique se o usu√°rio est√° autenticado e ativo');
console.log('2. Verifique se h√° vouchers e ofertas carregados');
console.log('3. Verifique se os bot√µes n√£o est√£o desabilitados');
console.log('4. Verifique se n√£o h√° erros de JavaScript');
console.log('5. Verifique se o loading state foi resolvido');
console.log('\nüîß PR√ìXIMOS PASSOS:');
console.log('- Se usu√°rio inativo: Execute o SQL de ativa√ß√£o');
console.log('- Se sem vouchers/ofertas: Execute o SQL de popula√ß√£o');
console.log('- Se bot√µes n√£o respondem: Verifique event listeners');
console.log('- Se loading infinito: Verifique useEffect dependencies');

console.log('\n‚úÖ DEBUG CONCLU√çDO - Analise os resultados acima');