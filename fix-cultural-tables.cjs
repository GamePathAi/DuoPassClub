require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);

async function fixCulturalTables() {
  try {
    console.log('üîß Verificando e corrigindo tabelas culturais...');
    
    // 1. Verificar se as tabelas existem
    console.log('\n1. Verificando exist√™ncia das tabelas...');
    
    const { data: expCheck, error: expError } = await supabase
      .from('cultural_experiences')
      .select('count')
      .limit(1);
    
    const { data: partCheck, error: partError } = await supabase
      .from('cultural_partners')
      .select('count')
      .limit(1);
    
    console.log('cultural_experiences:', expError ? '‚ùå N√£o existe' : '‚úÖ Existe');
    console.log('cultural_partners:', partError ? '‚ùå N√£o existe' : '‚úÖ Existe');
    
    // 2. Se as tabelas n√£o existem, verificar tabelas alternativas
    if (expError || partError) {
      console.log('\n2. Verificando tabelas alternativas...');
      
      // Verificar se existe tabela 'offers' que pode estar sendo usada
      const { data: offersData, error: offersError } = await supabase
        .from('offers')
        .select('*')
        .limit(3);
      
      if (!offersError && offersData) {
        console.log('‚úÖ Tabela offers encontrada com', offersData.length, 'registros');
        console.log('Estrutura da tabela offers:', Object.keys(offersData[0] || {}));
      }
      
      // Verificar se existe tabela 'merchants'
      const { data: merchantsData, error: merchantsError } = await supabase
        .from('merchants')
        .select('*')
        .limit(3);
      
      if (!merchantsError && merchantsData) {
        console.log('‚úÖ Tabela merchants encontrada com', merchantsData.length, 'registros');
        console.log('Estrutura da tabela merchants:', Object.keys(merchantsData[0] || {}));
      }
    }
    
    // 3. Testar query problem√°tica
    console.log('\n3. Testando query que est√° causando erro 400...');
    
    try {
      const { data: problematicQuery, error: problematicError } = await supabase
        .from('cultural_experiences')
        .select('*, cultural_partners(business_name, business_type, cultural_category, ambiance_description)')
        .eq('active', true)
        .limit(6);
      
      if (problematicError) {
        console.log('‚ùå Query problem√°tica falhou:', problematicError.message);
        console.log('C√≥digo do erro:', problematicError.code);
        console.log('Detalhes:', problematicError.details);
      } else {
        console.log('‚úÖ Query problem√°tica funcionou!');
      }
    } catch (err) {
      console.log('‚ùå Erro ao executar query problem√°tica:', err.message);
    }
    
    // 4. Testar queries alternativas
    console.log('\n4. Testando queries alternativas...');
    
    // Teste com offers (que sabemos que existe)
    try {
      const { data: offersQuery, error: offersQueryError } = await supabase
        .from('offers')
        .select('*, merchant:merchants(business_name, contact_info)')
        .eq('is_active', true)
        .limit(6);
      
      if (offersQueryError) {
        console.log('‚ùå Query com offers falhou:', offersQueryError.message);
      } else {
        console.log('‚úÖ Query com offers funcionou! Registros:', offersQuery?.length || 0);
      }
    } catch (err) {
      console.log('‚ùå Erro na query com offers:', err.message);
    }
    
    // 5. Verificar se h√° algum c√≥digo fazendo a query problem√°tica
    console.log('\n5. Recomenda√ß√µes de corre√ß√£o:');
    
    if (expError || partError) {
      console.log('\nüìã A√á√ïES NECESS√ÅRIAS:');
      console.log('1. As tabelas cultural_experiences e/ou cultural_partners n√£o existem');
      console.log('2. O c√≥digo est√° tentando fazer uma query que falha');
      console.log('3. Solu√ß√µes poss√≠veis:');
      console.log('   a) Criar as tabelas culturais no Supabase');
      console.log('   b) Modificar o c√≥digo para usar tabelas existentes (offers/merchants)');
      console.log('   c) Implementar fallback mais robusto para dados mock');
      
      console.log('\nüîß CORRE√á√ÉO IMEDIATA:');
      console.log('Modifique o hook useCulturalExperiences para n√£o fazer a query problem√°tica');
      console.log('e use apenas dados mock at√© as tabelas serem criadas.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

fixCulturalTables();