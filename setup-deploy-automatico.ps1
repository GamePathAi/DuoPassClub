# üöÄ Script de Configura√ß√£o Autom√°tica do Deploy - DuoPass
# Este script configura todo o sistema de deploy autom√°tico

param(
    [Parameter(Mandatory=$false)]
    [string]$GitHubRepo = "",
    
    [Parameter(Mandatory=$false)]
    [string]$GitHubUsername = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipGitHub = $false
)

Write-Host "üöÄ CONFIGURA√á√ÉO AUTOM√ÅTICA DO DEPLOY DUOPASS" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host ""

# Verificar se est√° na pasta correta
if (-not (Test-Path "project\package.json")) {
    Write-Host "‚ùå ERRO: Execute este script na pasta raiz do DuoPass" -ForegroundColor Red
    Write-Host "   Pasta atual: $(Get-Location)" -ForegroundColor Yellow
    Write-Host "   Esperado: pasta que cont√©m 'project/package.json'" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Pasta correta detectada" -ForegroundColor Green
Write-Host ""

# ETAPA 1: Verificar depend√™ncias
Write-Host "üìã ETAPA 1: Verificando depend√™ncias..." -ForegroundColor Cyan

# Verificar Node.js
try {
    $nodeVersion = node --version
    Write-Host "   ‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Node.js n√£o encontrado. Instale Node.js 18+" -ForegroundColor Red
    exit 1
}

# Verificar Git
try {
    $gitVersion = git --version
    Write-Host "   ‚úÖ Git: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Git n√£o encontrado. Instale Git" -ForegroundColor Red
    exit 1
}

# Verificar se GitHub Actions est√° configurado
if (Test-Path ".github\workflows\deploy.yml") {
    Write-Host "   ‚úÖ GitHub Actions configurado" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå GitHub Actions n√£o encontrado" -ForegroundColor Red
    exit 1
}

Write-Host ""

# ETAPA 2: Instalar depend√™ncias do projeto
Write-Host "üì¶ ETAPA 2: Instalando depend√™ncias..." -ForegroundColor Cyan

Set-Location "project"

try {
    Write-Host "   Executando npm install..." -ForegroundColor Yellow
    npm install --silent
    Write-Host "   ‚úÖ Depend√™ncias instaladas" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Erro ao instalar depend√™ncias" -ForegroundColor Red
    exit 1
}

Set-Location ".."
Write-Host ""

# ETAPA 3: Fazer build de teste
Write-Host "üî® ETAPA 3: Testando build..." -ForegroundColor Cyan

Set-Location "project"

try {
    Write-Host "   Executando npm run build..." -ForegroundColor Yellow
    npm run build
    
    if (Test-Path "dist") {
        Write-Host "   ‚úÖ Build realizado com sucesso" -ForegroundColor Green
        $distFiles = Get-ChildItem "dist" -Recurse | Measure-Object
        Write-Host "   üìÅ Arquivos gerados: $($distFiles.Count)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Pasta dist n√£o foi criada" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erro no build" -ForegroundColor Red
    exit 1
}

Set-Location ".."
Write-Host ""

# ETAPA 4: Configurar Git (se necess√°rio)
Write-Host "üîß ETAPA 4: Configurando Git..." -ForegroundColor Cyan

# Verificar se j√° √© um reposit√≥rio Git
if (-not (Test-Path ".git")) {
    Write-Host "   Inicializando reposit√≥rio Git..." -ForegroundColor Yellow
    git init
    Write-Host "   ‚úÖ Reposit√≥rio Git inicializado" -ForegroundColor Green
} else {
    Write-Host "   ‚úÖ Reposit√≥rio Git j√° existe" -ForegroundColor Green
}

# Verificar remote
$remoteUrl = git remote get-url origin 2>$null
if ($remoteUrl) {
    Write-Host "   ‚úÖ Remote configurado: $remoteUrl" -ForegroundColor Green
} else {
    if (-not $SkipGitHub) {
        if (-not $GitHubRepo) {
            Write-Host "   ‚ö†Ô∏è  Remote n√£o configurado" -ForegroundColor Yellow
            Write-Host "   üí° Configure manualmente com:" -ForegroundColor Cyan
            Write-Host "      git remote add origin https://github.com/SEU_USUARIO/SEU_REPO.git" -ForegroundColor Gray
        } else {
            Write-Host "   Configurando remote..." -ForegroundColor Yellow
            git remote add origin $GitHubRepo
            Write-Host "   ‚úÖ Remote configurado: $GitHubRepo" -ForegroundColor Green
        }
    }
}

Write-Host ""

# ETAPA 5: Verificar arquivos essenciais
Write-Host "üìÑ ETAPA 5: Verificando arquivos essenciais..." -ForegroundColor Cyan

$essentialFiles = @(
    "project\package.json",
    "project\vite.config.ts",
    "project\.env.production",
    ".github\workflows\deploy.yml",
    "nginx-unified.conf"
)

foreach ($file in $essentialFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file (FALTANDO)" -ForegroundColor Red
    }
}

Write-Host ""

# ETAPA 6: Criar scripts auxiliares
Write-Host "üõ†Ô∏è  ETAPA 6: Criando scripts auxiliares..." -ForegroundColor Cyan

# Script de deploy r√°pido
$quickDeployScript = @'
#!/bin/bash
# deploy-rapido.sh - Deploy r√°pido para emerg√™ncias

echo "üöÄ Deploy r√°pido DuoPass..."

# Verificar se est√° na pasta correta
if [ ! -f "project/package.json" ]; then
    echo "‚ùå Execute na pasta raiz do DuoPass"
    exit 1
fi

# Build
echo "üì¶ Fazendo build..."
cd project
npm run build
cd ..

# Deploy manual
echo "üöÄ Fazendo deploy..."
./upload-aws.ps1 -ServerIP "duopassclub.ch" -Username "ubuntu" -KeyPath "./dpkeyaws.pem"

echo "‚úÖ Deploy conclu√≠do!"
'@

$quickDeployScript | Out-File -FilePath "deploy-rapido.sh" -Encoding UTF8
Write-Host "   ‚úÖ deploy-rapido.sh criado" -ForegroundColor Green

# Script de verifica√ß√£o
$checkScript = @'
#!/bin/bash
# verificar-site.sh - Verificar se o site est√° funcionando

echo "üîç Verificando DuoPass..."

# Testar conectividade
if curl -f -s -I https://duopassclub.ch | head -n 1 | grep -q "200 OK"; then
    echo "‚úÖ Site online: https://duopassclub.ch"
else
    echo "‚ùå Site offline ou com problemas"
fi

# Verificar SSL
if curl -f -s -I https://duopassclub.ch | grep -q "HTTP/2 200"; then
    echo "‚úÖ SSL/HTTP2 funcionando"
else
    echo "‚ö†Ô∏è  Verificar configura√ß√£o SSL"
fi

echo "üìä Verifica√ß√£o conclu√≠da"
'@

$checkScript | Out-File -FilePath "verificar-site.sh" -Encoding UTF8
Write-Host "   ‚úÖ verificar-site.sh criado" -ForegroundColor Green

Write-Host ""

# ETAPA 7: Instru√ß√µes finais
Write-Host "üéØ CONFIGURA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host "=" * 30 -ForegroundColor Gray
Write-Host ""

Write-Host "üìã PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host ""

Write-Host "1. üîë Configurar Secrets no GitHub:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ V√° para: Settings > Secrets and variables > Actions" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Adicione os secrets necess√°rios (SSH_PRIVATE_KEY, SSH_HOST, etc.)" -ForegroundColor Gray
Write-Host ""

Write-Host "2. üöÄ Fazer primeiro deploy:" -ForegroundColor Yellow
Write-Host "   git add ." -ForegroundColor Gray
Write-Host "   git commit -m 'Setup deploy autom√°tico'" -ForegroundColor Gray
Write-Host "   git push -u origin main" -ForegroundColor Gray
Write-Host ""

Write-Host "3. üìä Monitorar deploy:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ GitHub Actions: https://github.com/SEU_USUARIO/SEU_REPO/actions" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Site: https://duopassclub.ch" -ForegroundColor Gray
Write-Host ""

Write-Host "üõ†Ô∏è  COMANDOS √öTEIS:" -ForegroundColor Cyan
Write-Host "   ./deploy-rapido.sh          # Deploy manual de emerg√™ncia" -ForegroundColor Gray
Write-Host "   ./verificar-site.sh         # Verificar se site est√° online" -ForegroundColor Gray
Write-Host "   npm run build               # Build local (pasta project/)" -ForegroundColor Gray
Write-Host ""

Write-Host "‚úÖ Sistema de deploy autom√°tico configurado e pronto!" -ForegroundColor Green
Write-Host "üéâ Fa√ßa um push para ativar o deploy autom√°tico!" -ForegroundColor Magenta